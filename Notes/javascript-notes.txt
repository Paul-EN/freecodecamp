In computer science, 'data' is anything that is meaningful to the computer.
JavaScript provides seven different 'data types' which are:
  undefined
  null
  boolean
  string
  symbol
  number
  object

'Variables' allow computers to store and manipulate data in a dynamic fashion. They do this by using a "label" to point to the data rather than using the data itself. Any of the seven data types may be stored in a variable.

'Variables' are similar to the x and y variables you use in mathematics, which means they're a simply name to represent the data we want to refer to. Computer variables differ from mathematical variables in that they can store different values at different times.

We tell JavaScript to create or 'declare' a variable by putting the keyword 'var' in front of it, like so:
var ourName;
creates a variable called ourName. in JavaScript we end statements with semicolons.

Variable names can be made up of numbers, letters, and $ and _, but may not contain spaces or start with a number.

----------

In JavaScript, you can store a value in a variable with the assignment operator.

myVariable = 5;

Assigns the Number value 5 to myVariable.

Assign always goes from right to left. Everything to the right of the = operator is resolved before the value is assigned to the variable to the left of the operator.

myVar = 5;
myNum = myVar;

Assigns 5 to myVar and then resolves myVar to 5 again and assigns it to myNum.

----------

It is common to initialize a variable to an initial value in the same line as it is declared.

var myVar = 0;

Creates a new variable called myVar and assigns it an initial value of 0.

----------

When JavaScript variables are declared, they have an initial value of undefined. If you do a mathematical operation on an undefined variable your result will be 'NaN' which means "Not a Number". If you concatenate a string with an undefined variable, you will get a literal string of "undefined".

----------

In JavaScript all variables and function names are case sensitive. This means that capitalization matters.

MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you do not use this language feature.

Best Practice:
Write variable names in JavaScript in camelCase. In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.
Examples:
  var someVariable;
  var anotherVariableName;
  var thisVariableNameIsTooLong;

----------

Number is a data type in JavaScript which represents numeric data.
Now let's try to add two numbers using JavaScript.
JavaScript uses the + symbol as addition operation when placed between two numbers.
Example:
  myVar = 5 + 10; // assigned 15

We can also subtract one number from another.
JavaScript uses the - symbol for subtraction.
Example:
  myVar = 12 - 6; // assigned 6

We can also multiply one number by another.
JavaScript uses the * symbol for multiplication of two numbers.
Example:
  myVar = 13 * 13; // assigned 169

We can also divide one number by another.
JavaScript uses the / symbol for division.
Example:
  myVar = 16 / 2; // assigned 8

----------

You can easily increment or add one to a variable with the ++ operator.
i++;
is the equivalent of
i = i + 1;
Note:
The entire line becomes i++;, eliminating the need for equal sign.

You can easily decrement or decrease a variable by one with the -- operator.
i--;
is the equivalent of
i = i - 1;
Note:
The entire line becomes i--;, eliminating the need for the equal sign.

----------

We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.
Note:
Not all real numbers can accurately be represented in floating point. This can lead to rounding errors.

----------

In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.
Example:
  myVar = 2.0 * 2.5; // assigns 5.0

----------

The remainder operator % gives the remainder of the division of two numbers.
Example:
  5 % 2 = 1 because
  Math.floot(5 / 2) = 2 (Quotient)
  2 * 2 = 4
  5 - 4 = 1 (Remainder)
Usage:
  In mathematics, a number can be checked even or odd by checking the remainder of the division of the number by 2.
  17 % 2 = 1 (17 is Odd)
  48 % 2 = 0 (48 is Even)
Note:
  the remainder operator is sometimes incorrectly referred to as the "modulus" operator. It is very similar to modulus, but does not work properly with negative numbers.

----------

In programming, it is common to use assignment to modify the contents of a variable. Rememebr that everything to the right of the equals sign is evaluated first, so we can say:
myVar = myVar + 5;
to add 5 to myVar. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.
One such operator is the += operator.
Example:
  myVar += 5; will add 5 to myVar

Like the += operator, -= subtracts a number from a variable.
Example:
  myVar = myVar - 5;
will subtract 5 from myVar. This can be rewritten as:
  myVar -= 5;

The *= operator multiplies a variable by a number.
  myVar = myVar * 5;
will multiply myVar by 5. This can be rewritten as:
  myVar *= 5;

The /= operator divides a variable by another number.
  myVar = myVar / 5;
Will divide myVar by 5. This can be rewritten as:
  myVar /= 5;

----------

var myName = "your name";
"your name" is called a string literal. It is a string because it is a series of zero or more characters enclosed in single or double quotes.

When you are defining a string, you must start and end with a single or double quote. What happens when you need a literal quote: " or ' inside of your string?
In JavaScript, you can escape a quote from considering it as an end of sring quote by placing a backslash (\) in front of the quote.
Example:
  var sampleStr = "Alan said, \"Peter is learning JavaScript\".";
This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. SO if you were to print this to the console, you would get:
  Alan said, "Peter is learning JavaScript".

String values in JavaScript may be written with single or double quotes, so long as you start and end with the same type of quote. Unlike some languages, single and double quotes are functionally identical in JavaScript.
  "This string has \"double quotes\" in it"
The value in using one or the other has to do with the need to escape quotes of the same type. Unless they are escaped, you cannot have more than one pair of whichever quote type begins a string.
If you have a string with many double quotes, this can be difficult to read and write.
Instead, use single quotes:
  'This string has "double quotes" in it. And "probably" lots of them.'

Quotes are not the only characters that can be escaped inside a string. Here is a table of common escape sequences:
  \' - Single quotes
  \" - Double quotes
  \\ - backslash
  \n - newline
  \r - carriage return
  \t - tab
  \b - backspace
  \f - form feed
  Note that the backslash itself must be escaped in order to display as a backslash.

----------

In JavaScript, when the + operator is used with a String value, it is called the concatenation operator. You can build a new string out of other strings by concatenating them together.
Example:
  'My name is Alan,' + ' I concatenate.'
Note:
  Watch out for spaces. Concatenation does not add spaced between concatenated string, so you'll need to add them yourself.

We can also use the += operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.

Sometimes you will need to build a string, Mad Libs style. By using the concatenation operator (+), you can insert one or more variables into a string you're building.
Example:
  var myName = "Paul";
  var myStr = "Hello, I am " + myName + ". How are you?";
  //returns "Hello, I am Paul. How are you?"

Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.

You can find the length of a String value by writing .length after the string variable or string literal.
Example:
  "Alan Peter".length; // 10
For example, if we created a variable var firstName = "Charles", we could find out how long the string "Charles" is by using the firstName.length property.

Bracket notation is a way to get a character at a specific index within a string.
Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as Zero-based indexing.
For example, the character at index 0 in the word "Charles" is "C". So if var firstName = "Charles", you can get the value of the first letter of the string by using firstName[0].

In JavaScript, String values are immutable, which means that they cannot be altered once created.

For example, the following code:
  var myStr = "Bob";
  myStr[0] = "J";
cannot change the value of myStr to "Job", because the contents of myStr cannot be altered. Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed. The only way to change myStr would be to assign it with a new string, like this:
  var myStr = "Bob";
  myStr = "Job";

You can also use bracket notation to get the character at other positions within a string.
Remember that computers start counting at 0, so the first character is actually the zeroth character.
Example:
  var lastName = "Lovelace";
  var thirdLetterOfLastName = lastName[2];
  // returns v for thirdLetterOfLastName

In order to get the last letter of a string, you can subtract one from the string's length.
For example, If var firstName = "Charles", you can get the value of the last letter of the string by using firstName[fistName.length -1].

You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.
For example, you can get the value of the third-to-last letter of the var firstName = "Charles" string by using firstName[firstName.length - 3].

----------

With JavaScript array variables, we can store several pieces of data in one place.
You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry like this:
  var sandwich = ["peanut butter", "jelly", "bread"]

You can also nest arrays within othr arrays, like this: [["Bulls", 23], ["White Sox", 45]].
This is also called a Multi-Dimensional Array.

We can access the data inside arrays using indexes.
Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use zero-base indexing, so the first element in an array is element 0.
Example:
  var array = [1, 2, 3];
  array[0]; // equals 1
  var data = array[1]; // equals 2

Unlike strings, the entries of arrays are mutable (editable) and can be changed freely.
Example:
  var ourArray = [3, 2, 1];
  ourArray[0] = 1; // equals [1, 2, 1]

One way to think of a multi-dimensional array, is as an array of arrays. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.
Example:
  var arr = {
    [1,2,3],
    [4,5,6],
    [7,8,9],
    [[10,11,12], 13, 14]
  };
  arr[3]; // equals [[10,11,12], 13, 14] - calls for the fourth row
  arr[3][0]; // equals [10,11,12] - calls for the first column of the fourth row
  arr[3][0][1]; // equals 11 - calls for the second column of the first column of the fourth row

An easy way to append data to the end of an array is via the push() function.
.push() takes one or more parameters and "pushes"  them onto the end of the array.
  var arr = [1,2,3];
  arr.push(4);
  // arr is now [1,2,3,4]

Another way to change the data in an array is with the .pop() function.
.pop() is used to "pop" a value off of the end of an array. We can store this "popped off" value by assigning it to a variable.
Any type of entry can be "popped" off of an array - numbers, strings, even nested arrays.
Example:
  var oneDown = [1,4,6].pop();
  the variable oneDown now holds the value 6 and the array becomes [1,4].

pop() always removes the last element of an array. What if you want to remove the first?
That's where .shift() comes in. It works just like .pop(), except it removed the first element instead of the last.

Not only can you shift elements off of the beginning of an array, you can also unshift elements to the beginning of an array, i.e. add elements to the front of the array.
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.

Create a shipping list in the variable myList. The list should be a multi-dimensional array containig several sub-arrays.
The first element in each sub-array should contain a string with the name of the item.
The second element should be a number representing the quantity i.e.
["Chocolate Bar", 15]
There should be at least 5 sub-arrays in the list.
  var myList = [["Apples", 4], ["Oranges", 6], ["Chicken Breast", 3], ["Salt", 1], ["Pepper", 1]];

----------

In JavaScript, we can divide up our code into reusable parts called functions.
Here's an example of a function:
  function functionName() {
    console.log("Hello World");
  }
You can call or invoke this function by using its name followed by parentheses, like this:
  functionName();
Each time the function is called it will print out the message "Hello World" on the dev console. All of the code between the curly braces will be executed every time the function is called.

Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or "passed") into a function when it is called are known as arguments.

Here is a function with two parameters, param1 and param2:
  function testFun(param1, param2) {
    console.log(param1, param2);
  }
Then we can call testFun:
  testFun("Hello", "World");
We have passed two argument, "Hello" and "World". Inside the function, param1 will equal "Hello" and param2 will equal "World". Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.

In JavaScript, scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope. This means, they can be seen everywhere in your JavaScript code.
Variables which are used without the var keyword are automatically created in the global scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with var.

Variables which are declared within a function, as well as the function parameters have local scope. That means, that they are only visible within that function.
Here is a function myTest with a local variable called loc:
  function myTest() {
    var loc = "foo";
    console.log(loc);
  }
  myTest(); // "foo"
  console.log(loc); // "undefined"
loc is not defined outside of the function.

It is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.
In this example:
  var someVar = "Hat";
  function myFun() {
    var someVar = "Head";
    return someVar;
  }
The function myFun will return "Head" because the local version of the variable is present.

We can pass values into a function with arguments. You can use a return statement to send a value back out of a function.
Example:
  function plusThree(num) {
    return num + 3;
  }
  var answer = plusThree(5); // 8
plusThree takes an arguement from num and returns a value equal to num + 3.

Everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.
Assume we have pre-defined a function sum which adds two numbers together, then:
  ourSum = sum(5, 12);
will call sum function, which returns a value of 17 and assigns it to ourSum variable.

In Computer Science a queue is an abstract Data Structure where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.
  function nextInLine(arr, item) {
    arr.push(item); // Push item at the end of arr.

    var removed = arr.shift(); // Call the shift() method on arr to get the first item and store it in removed.

    return removed; // Return removed
  }

Another data type is the Boolean. Boolean may only be one of two values: true or false. They are basically little on-off switches, where true is "on" and false is "off". These two states are mutually exclusive.
Note:
  Boolean values are never written with quotes. The strings "true" and "false" are not Boolean and have no special meaning in JavaScript.

If statements are used to make decisions in code. The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as Boolean conditions because they may only be true or false.
When the condition evaluates to true, the program executes the statement inside the curly braces. When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.
Pseudocode:
    if (condition is true) {
      statement is executed
    }
Example:
  function test (myCondition) {
    if (myCondition) {
      return "It was true";
    }
    return "It was false";
  }
  test(true); // returns "It was true"
  test(false); // returns "It was false"

  When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not. Since it is true, the function returns "It was true". When we call test with a value of false, myCondition is not true and the statement in the curly braces is not executed and the function returns "It was false".

There are many Comparison Operators in JavaScript. All of these operators return a boolean true or false value.
The most basic operator is the equality operator ==. The equality operator compares two values and returns true if they're equivalent or false if they are not. Note that equality is different from assignment (=), which assigns the value at the right of the operator to a variable in the left.
Example:
  function equalityTest(myVal) {
    if (myVal == 10) {
      return "Equal";
    }
    return "Not Equal";
  }
if myVal is qual to 10, the equality operator returns true, so the code in the curly braces will execute, and the function will return "Equal". Otherwise, the function will return "Not Equal".

In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. Once it does, however, it can compare terms as follows:
  1  ==  1  // true
  1  ==  2  // false
  1  == '1' // true
  "3"==  3  // true

Strict equality (===) is the counterpart to the equality operator (==). Unlike the equality operator, strict equality tests both the data type and value of the copared elements.
Examples:
  3  ===  3  // true
  3  === '3' // false
In the second example, 3 is a Number type and '3' is a String type.

The inequality operator (!=) is the opposite of the equality operator. It means "Not Equal" and returns false where equality would return true and vice-versa. Like the equality operator, the inequality operator will convert data types of values while comparing.
Example:
  1  !=  2    // true
  1  != "1"   // false
  1  != '1'   // false
  1  != true  // false
  0  != false // false

The strict inequality operator (!==) is the opposite of the strict equality operator. It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa. Strict inequality will not convert data types.
Examples:
  3  !==  3  // false
  3  !== '3' // true
  4  !==  3  // true

The greater than operator (>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, greater than operator will convert data types of values while comparing.
Example:
   5  >  3  // true
   7  > '3' // true
   2  >  3  // false
  '1' >  9  // false

The greater than or equal to operator (>=) compare the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, greater than or equal to operator will convert data types while comparing.
Example:
   6  >=  6  // true
   7  >= '3' // true
   2  >=  3  // false
  '7' >=  9  // false

The less than operator (<) compares the values of two numbers. If the number to the left is less than the number to the right, it returns true. Otherwise, it returns false. Like the equality operator, less than operator converts data types while comparing.
Example:
   2  <  5  // true
  '3' <  7  // true
   5  <  5  // false
   3  <  2  // false
  '8' <  4  // false

The less than or equal to operator (<=) compares the values of two numbers. If the number to the left is less than or equal the number to the right, it returns true. If the number on the left is greater than the number on the right, it returns false. Like the equality operator, less than or equal to converts data types.
Example:
   4  <=  5  // true
  '7' <=  7  // true
   5  <=  5  // true
   3  <=  2  // false
  '8' <=  4  // false

Sometimes you will need to test more than one thing at a time. The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
The same effect could be achieved by nesting an if statement inside another if:
  if (num > 5) {
    if (num < 10) {
      return "Yes";
    }
  }
  return "No";
will only return "Yes" if num is between 6 and 9 (6 and 9 included). The same logic can be written as:
  if (num > 5 && num < 10) {
    return "Yes";
  }
  return "No";

The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.
The pattern below should look familiar from prior waypoints:
  if (num > 10) {
    return "No";
  }
  if (num < 5) {
    return "Yes";
  }
  return "Yes";
will return "Yes" only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:
if (num > 10 || num < 5) {
  return "No";
}
return "Yes";

When a condition for an if statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an else statement, an alternate block of code can be executed.
  if (num > 10) {
    return "Bigger than 10";
  } else {
    return "10 or Less";
  }

If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.
  if (num > 15) {
    return "Bigger than 15";
  } else if (num < 5) {
      return "Smaller than 5";
  } else {
    return "Between 5 and 15";
  }

Order is important in if, else if statements.
The loop is executed from top to bottom so you will want to be careful of what statement comes first.
Take these two functions as an example.
Here's the first:
  function foo(x) {
    if (x < 1) {
      return "Less than one";
    } else if (x < 2) {
      return "Less than two";
    } else {
      return "Greater than or equal to two";
    }
  }
And the second just switches the order of the statements:
  function bar(x) {
    if (x < 2) {
      return "Less than two";
    } else if (x < 1) {
      return "Less than one";
    } else {
      return "Greater than or equal to two";
    }
  }
While these two function look nearly identical if we pass a number to both we get different outputs.
  foo(0) // "Less than one"
  bar(0) // "Less than two"

if/else statements can be chained together for complex logic. Here is pseudocode of multiple chained if / else if statements:
  if (condition1) {
    statement1
  } else if (condition2) {
    statement2
  } else if (condition3) {
    statement3
  . . .
  } else {
    statemtnN
  }

Golf Code
In the game of gold each hole has a par meaning the average number of strokes a golfer is expected to make in order to sink the ball in a hole to complete the play. Depending on how far above or below par your strokes are, there is a different nickname.
Your function will be passed par and strokes arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):
  Strokes               Return
  1                     "Hole-in-one!"
  <= par - 2            "Eagle"
  par - 1               "Birdie"
  par                   "Par"
  par + 1               "Bogey"
  par + 2               "Double Bogey"
  >= par + 3            "Go Home!"


function golfScore(par, strokes) {
    if (strokes == 1) {
      return "Hole-in-one!";
    } else if (strokes <= par - 2) {
      return "Eagle";
    } else if (strokes == par - 1) {
      return "Birdie";
    } else if (strokes == par) {
      return "Par";
    } else if (strokes == par + 1) {
      return "Bogey";
    } else if (strokes == par + 2) {
      return "Double Bogey";
    } else if (strokes >= par + 3) {
      return "Go Home!";
    } else {
      return "Change Me";
    }
  }

  // Change these values to test
  golfScore(5, 4);

If you have many option to choose from, use a switch statement. A switch statement tests a value and can have many case statements which defines various possible values. Statements are executed from the first matched case value until a break is encountered.
Here is a pseudocode example:
  switch (num) {
    case value1:
      statement1;
      break;
    case value2:
      statement2;
      break;
  . . .
    case valueN:
      statementN;
      break;
  }
case values are tested with strict equality (==). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.
Example:
  function caseInSwitch(val) {
    var answer = "";
    switch (val) {
      case (1):
        return "alpha";
        break;
      case (2):
        return "beta";
        break;
      case (3):
        return "gamma";
        break;
      case (4):
        return "delta";
        break;
    }
    return answer;
    }

  // Change this value to test
  caseInSwitch(1); // returns "alpha"

In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think ofit like the final else statement in an if/else chain.
A default statement should be the last case.
  switch (num) {
    case value1:
      statement1;
      break;
    case value2:
      statement2:
      break;
  ...
    default:
      defaultStatement;
  }

Example:
  function switchOfStuff(val) {
  var answer = "";
  switch (val) {
    case ("a"):
      return "apple";
      break;
    case ("b"):
      return "bird";
      break;
    case ("c"):
      return "cat";
      break;
    default:
      return "stuff";
  }
  return answer;
  }

  // Change this value to test
  switchOfStuff(1);
